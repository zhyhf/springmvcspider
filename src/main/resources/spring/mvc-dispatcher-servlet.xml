<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context.xsd
      http://www.springframework.org/schema/mvc
      http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
      http://www.springframework.org/schema/task
      http://www.springframework.org/schema/task/spring-task-3.0.xsd">

   
    <!-- 静态资源(js、image等)的访问 -->
    <mvc:default-servlet-handler/>
    <!-- 开启注解 -->
    <mvc:annotation-driven/>


    <!--ViewResolver 视图解析器-->
    <!--用于支持Servlet、JSP视图解析-->
    <bean id="jspViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/WEB-INF/pages/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <bean class="com.gs.spider.gather.commons.CommonSpider" name="commonSpider">
        <constructor-arg name="staticValue" ref="staticValue"/>
        <constructor-arg name="taskManager" ref="taskManager"/>
        <property name="commonWebpageDAO" ref="commonWebpageDAO"/>
        <property name="spiderInfoDAO" ref="spiderInfoDAO"/>
        <property name="commonWebpagePipeline" ref="commonWebpagePipeline"/>
        <property name="contentLengthLimitHttpClientDownloader" ref="contentLengthLimitHttpClientDownloader"/>
        <property name="keywordsExtractor" ref="HANLPExtractor"/>
        <property name="summaryExtractor" ref="HANLPExtractor"/>
        <property name="namedEntitiesExtractor" ref="HANLPExtractor"/>
        <property name="casperjsDownloader" ref="casperjsDownloader"/>
        
        <property name="pipelineList">
            <list>
                <ref bean="commonWebpagePipeline"/>
            </list>
        </property>
    </bean>
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <array>
            </array>
        </property>
        <property name="fileEncoding" value="utf-8"/>
    </bean>
    <bean id="schedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean"/>
    <task:executor id="executor" pool-size="5"/>
    <task:scheduler id="scheduler" pool-size="10"/>
    <task:annotation-driven executor="executor" scheduler="scheduler"/>
     <!--既然知道了spring的启动流程，那么web容器初始化webApplicationContext时作为公共的上下文环境，
    只需要将service、dao等的配置信息在这里加载，而servlet自己的上下文环境信息不需要加载。
    故，在applicationContext.xml中将@Controller注释的组件排除在外，
    而在dispatcherServlet加载的配置文件中将@Controller注释的组件加载进来，
    方便dispatcherServlet进行控制和查找。-->
    <!--指明 controller 所在包，并扫描其中的注解-->
    <context:component-scan base-package="com.gs.spider.**">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service" />
    </context:component-scan>
</beans>
